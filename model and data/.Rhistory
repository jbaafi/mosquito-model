plot(x, y)
y <- c("a", "b", "c")
plot(y, x)
y
getwd()
pacman::p_load(rio)
data <- import("/Users/jbaafi/Documents/climate-and-mosquitoes/climate data/ontario
")
data <- import("/Users/jbaafi/Documents/climate-and-mosquitoes/climate data/ontario
")
data <- import("/Users/jbaafi/Documents/climate-and-mosquitoes/climate data/ontario")
data <- import("/Users/jbaafi/Documents/climate-and-mosquitoes/climate data/ontario/en_climate_daily_ON_6153301_2016_P1D.csv")
head(data)
View(data)
pacman::p_unload(rio)
data <- import("/Users/jbaafi/Documents/climate-and-mosquitoes/climate data/ontario/en_climate_daily_ON_6153301_2016_P1D.csv")
y <- p*N*deltaplus + (1-p)*N*(1-deltaminus)
p <- 0.2
N <- 163
deltaplus <- 0.75
deltaminus <- 0.99
y <- p*N*deltaplus + (1-p)*N*(1-deltaminus)
y
p <- (1-deltaminus-(y/N))/(1-deltaminus-deltaplus)
p
p <- 0.5
y <- p*N*deltaplus + (1-p)*N*(1-deltaminus)
y
p <- (1-deltaminus-(y/N))/(1-deltaminus-deltaplus)
p
30*18
6+12+12+12+10+12
8+64
72*16
0.15*5
0.15*7
0.15*6
880-624
1/2.33
1/0.43
getwd()
swirl
swirl()
library(swirl)
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd = 3)
abline(v=12, lwd = 2)
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of counties in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
east
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution$region), region == "west", west$pm25, col = "green")
hist(subset(pollution$region), region = "west, col = "green")
hist(subset(pollution$region), region = "west", col = "green")
hist(subset(pollution$region), region = "west", col = "green")
west <- subset(pollution)
hist(subset(pollution), region = "west", col = "green")
hist(subset(pollution), region == "west", west$pm25, col = "green")
next
next()
help()
exit()
0
hist(subset(pollution,region=="west")$pm25, col = "green")
call(pollution, plot)
call(pollution$pm25, pollution$latitude, plot)
call(pollution$latitude, pollution$pm25, plot)
plot(pollution)
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region = "west")
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
0
rm(list = ls())
#Clear workspace
rm(list = ls())
# Import packages into r
library(tidyverse)
library(scales)
library(dplyr)
library(chron)
library(ggplot2)
library(deSolve)
#Import 2011-2016 climate data from Ontario
climate_11 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2011_P1D.csv", header = TRUE)
climate_12 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2012_P1D.csv", header = TRUE)
climate_13 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2013_P1D.csv", header = TRUE)
climate_14 <- read.csv("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population/data/en_climate_daily_ON_6153301_2014_P1D.csv", header = TRUE)
#Clear workspace
rm(list = ls())
getwd()
#set working directory
setwd("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population")
#Clear workspace
rm(list = ls())
#set working directory
setwd("/Users/jbaafi/Desktop/Mosquito population dynamics/mosquito_population")
getwd()
# Clear workspace
rm(list = ls())
# Load packages
pacman::p_load(pacman, GillespieSSA, ssar, ggplot2)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
#Create birth function
phi <- function(t){
ovi <- ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657)
return(ovi)}
#Create birth function
delta_A <- function(t){ return(0.3)} # just to experiment on adding the rain function
#Create death function
pi_A        <- function(t){ return(0.1)}
#Create infectives function
pi_M   <- function(t){ return(0.1)}
#Estimate values
matreturn[,1] <- q*phi(t)*(1-X[,1]/k)*X[,2]
#Value to return
matreturn  <- matrix(NA, nrow = length(t), ncol = 6)
# Create temperature function
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
#Create birth function
phi <- function(t){
ovi <- ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657)
return(ovi)}
#Create birth function
delta_A <- function(t){ return(0.3)} # just to experiment on adding the rain function
#Create death function
pi_A        <- function(t){ return(0.1)}
#Create infectives function
pi_M   <- function(t){ return(0.1)}
#Estimate values
matreturn[,1] <- q*phi(t)*(1-X[,1]/k)*X[,2]
#Estimate values
matreturn[,1] <- q*phi(t)*(1-X[,1]/k)*X[,2]
# Create temperature function
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/365) - 11*cos(2*t*pi/365) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
# Create temperature function
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/365) - 11*cos(2*t*pi/365) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
#Create birth function
phi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
delta_A <- function(t){ return(0.3)} # just to experiment on adding the rain function
#Create death function
pi_A        <- function(t){ return(0.1)}
#Create infectives function
pi_M   <- function(t){ return(0.1)}
#Estimate values
matreturn[,1] <- q*phi(t)*(1-X[,1]/k)*X[,2]
matreturn[,2] <- delta_A(t)*X[,1]
matreturn[,3] <- pi_A(t)*X[,1]
matreturn[,4] <- mu_A*X[,1]
matreturn[,5] <- pi_M(t)*X[,2]
matreturn[,6] <- mu_M*X[,2]
matreturn
# Simulate the Hamdan and Kilicman model
#Initial parameters
params     <- c(q = 100, k = 10^10, mu_A = 0.03, mu_M = 0.1)
q <- params[1]
#Estimate values
matreturn[,1] <- q*phi(t)*(1-X[,1]/k)*X[,2]
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
# Clear workspace
rm(list = ls())
# Load packages
pacman::p_load(pacman, GillespieSSA, ssar, ggplot2)
# Simulate the SIS model
#Initial parameters
k          <-  24576.5529836797
delta      <-  0.0591113454895868 + 0.208953907151055
gamma_ct   <-  0.391237630231631
params     <- c(k = k, delta = delta, gamma_ct = gamma_ct)
X          <- matrix(c(S = 1000000000, I = 1000), ncol = 2)
pfun       <- function(t, X, params){
#Value to return
matreturn  <- matrix(NA, nrow = length(t), ncol = 6)
# Create temperature function
temp <- function(t){return(8.8 - 5.7*sin(2*t*pi/52) -
11*cos(2*t*pi/52) +
rnorm(n = 1, mean = 0, sd = 20))} # replace with the right estimated parameter values
# Create rainfall function as a random event
rain <- function(t){return(sample(seq(0, 20), t, replace = TRUE, prob = NULL))} # replace this with the estimated lognorm
#Create birth function
lambda     <- function(t){ return(4.328e-4 - (2.538e-7)*temp(t) -
(3.189e-7)*sin(2 * temp(t) * pi/52) -
(3.812e-7)*cos(2 * temp(t) * pi/52))}
#Create birth function
lambda2<- function(t){ return(4.328e-4 - (2.538e-7)*temp(t) -
(3.189e-7)*sin(2 * temp(t) * pi/52) -
(3.812e-7)*cos(2 * temp(t) * pi/52)*(5*rain(t)+2))} # just to experiment on adding the rain function
#Create death function
mu         <- function(t){ return(9.683e-5 + (1.828e-8)*temp(t) +
(2.095e-6)*sin(2 * temp(t) * pi/52) -
(8.749e-6)*cos(2 * temp(t) * pi/52))}
#Create infectives function
beta_fun   <- function(t){ return( 0.479120824267286 +
0.423263042762498*sin(-2.82494252560096 + 2*temp(t)*pi/52) )}
#Estimate values
matreturn[,1] <- lambda(t)*(X[,1] + X[,2])
matreturn[,2] <- mu(t)*X[,1]
matreturn[,3] <- beta_fun(t)*X[,1]*X[,2]/(1 + params[1]*X[,2])
matreturn[,4] <- mu(t)*X[,2]
matreturn[,5] <- params[2]*X[,2]
matreturn[,6] <- params[3]*X[,2]
#Return
return(matreturn)
}
v          <- matrix(c(1,-1, -1, 0, 0, 1, 0, 0, 1, -1, -1, -1), nrow = 2, byrow = TRUE)
tmin       <- 0
tmax       <- 1
nsim       <- 2
simulation2 <- ssa(X, pfun, v, params, tmin, tmax, nsim = nsim, print.time = FALSE,
plot.sim = TRUE, maxiter = 5000, kthsave = 10, keep.file = TRUE,
fname = "sim2.txt")
# Clear workspace
rm(list = ls())
# Set working directory
setwd("/Users/jbaafi/Documents/climate-and-mosquitoes/useful files")
# Load packages
pacman::p_load(pacman, GillespieSSA, ssar, ggplot2)
source("~/Documents/climate-and-mosquitoes/useful files/temp_analysis.R", echo=TRUE)
# Now we define a modified function of the form F = a + c*sin(bt) + d*cos(bt)
pfunc2 <- function(t, a, ampl1, ampl2) (a + ampl1*sin(2*pi*t/365) + ampl2*cos(2*pi*t/365))
# We can re-fit the data using the above function
nls.model2 <- nls(Mean.Temp ~ pfunc2(t, a, ampl1, ampl2), data=df, start=list(a = 8.8, ampl1 = -5.7, ampl2 = -10.7))
# Evaluating the results, we get
summary(nls.model2)
# Fitted parameters
param <- coef(nls.model2)
a <- param["a"]
ampl1 <- param["ampl1"]
ampl2 <- param["ampl2"]
# Save fitted model2
fit.model2 <- pfunc2(t, a, ampl1, ampl2)
# Again, plot the actual data
plot(Days.Since.Origin, Mean.Temp,
xlab = "Time (days)",
ylab = expression("Temperature ("*~degree*C*")"),
main = "Mean Daily Temperature - Periodic Function Fit")
# Plot model1
lines(t, fit.model1, col = "red")
# Plot the fitted Model2
lines(t, fit.model2, col = "green")
# Evaluating the results, we get
summary(nls.model2)
# Create temperature function
temp <- function(t){return(8.91910 - 5.59158*sin(2*pi*t/365) - 11.93443*cos(2*pi*t/365) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
#Create birth function
delta_E <- function(t){ return(ifelse(temp(t) <= 10, 0.05, 4.049403 *exp(-(temp(t)-75.098187)^2/1337.666814)))} # just to experiment on adding the rain function
#Create death function
delta_L <- function(t){ return(ifelse(temp(t) <= 10 | temp(t) >= 40, 0.01, 0.16231*exp(-(temp(t)-27.18118)^2/109.03255)))}
X <- matrix(c(E = 100, L = 100, P = 100, A = 100), ncol = 2)
X
X <- matrix(c(E = 100, L = 100, P = 100, A = 100), ncol = 4)
X
X <- matrix(c(E = 100, L = 100, P = 100, A = 100), ncol = 4)
E <- X[,1]
L <- X[,2]
P <- X[,3]
A <- X[,4]
E
L
P
A
# Clear workspace
rm(list = ls())
dev.off()
# Load packages
pacman::p_load(pacman, GillespieSSA, ssar, ggplot2)
# Simulate the Hamdan and Kilicman model
#Initial parameters
params <- c(b = 100, mu_E = 0.05, mu_L = 0.06, mu_P = 0.04, mu_A = 0.05)
b <- params[1]
mu_E <- params[2]
mu_L <- params[3]
mu_P <- params[4]
mu_A <- params[5]
b
mu_E
X <- matrix(c(E = 100, L = 100, P = 100, A = 100), ncol = 4)
E <- X[,1]
L <- X[,2]
P <- X[,3]
A <- X[,4]
pfun       <- function(t, X, params){
#Value to return
matreturn  <- matrix(NA, nrow = length(t), ncol = 6)
# Create temperature function
temp <- function(t){return(8.91910 - 5.59158*sin(2*pi*t/365) - 11.93443*cos(2*pi*t/365) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
# Create rainfall function as a random event
#rain <- function(t){return(sample(seq(0, 20), t, replace = TRUE, prob = NULL))} # replace this with the estimated lognorm
#Create birth function
phi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
delta_E <- function(t){ return(ifelse(temp(t) <= 10, 0.05, 4.049403 *exp(-(temp(t)-75.098187)^2/1337.666814)))} # just to experiment on adding the rain function
#Create death function
delta_L <- function(t){ return(ifelse(temp(t) <= 10 | temp(t) >= 40, 0.01, 0.16231*exp(-(temp(t)-27.18118)^2/109.03255)))}
#
delta_P <- function(t){ return(ifelse(temp(t) <= 10 | temp(t) >= 40, 0.03, 0.5920232 *exp(-(x-39.9070020)^2/339.6702830)))}
#Estimate values (work from here downwards)
matreturn[,1] <- b*phi(t)*A
matreturn[,2] <- delta_E(t)*E
matreturn[,3] <- mu_E*E
matreturn[,4] <- delta_L(t)*L
matreturn[,5] <- mu_L*L
matreturn[,6] <- delta_P(t)*P
matreturn[,7] <- mu_P*P
matreturn[,8] <- mu_A*A
#Return
return(matreturn)
}
t <- seq(0, 50)
#Value to return
matreturn  <- matrix(NA, nrow = length(t), ncol = 8)
# Create temperature function
temp <- function(t){return(8.91910 - 5.59158*sin(2*pi*t/365) - 11.93443*cos(2*pi*t/365) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
#Create birth function
phi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
delta_E <- function(t){ return(ifelse(temp(t) <= 10, 0.05, 4.049403 *exp(-(temp(t)-75.098187)^2/1337.666814)))} # just to experiment on adding the rain function
#Create death function
delta_L <- function(t){ return(ifelse(temp(t) <= 10 | temp(t) >= 40, 0.01, 0.16231*exp(-(temp(t)-27.18118)^2/109.03255)))}
#
delta_P <- function(t){ return(ifelse(temp(t) <= 10 | temp(t) >= 40, 0.03, 0.5920232 *exp(-(x-39.9070020)^2/339.6702830)))}
#Estimate values (work from here downwards)
matreturn[,1] <- b*phi(t)*A
matreturn[,2] <- delta_E(t)*E
matreturn[,3] <- mu_E*E
matreturn[,4] <- delta_L(t)*L
matreturn[,5] <- mu_L*L
matreturn[,6] <- delta_P(t)*P
matreturn[,7] <- mu_P*P
matreturn[,8] <- mu_A*A
matreturn
v <- matrix(c(1,-1, -1, 0, 0, 0, 0, 0,
0, 1, 0, -1, -1, 0, 0, 0,
0, 0, 0, 1, 0, -1, -1, 0,
0, 0, 0, 0, 0, 1, 0, -1), nrow = 4, byrow = TRUE)
v
v <- matrix(c(1,-1, -1, 0, 0, 0, 0, 0,
0, 1, 0, -1, -1, 0, 0, 0,
0, 0, 0, 1, 0, -1, -1, 0,
0, 0, 0, 0, 0, 1, 0, -1), nrow = 4, byrow = TRUE)
tmin       <- 0
tmax       <- 1
nsim       <- 2
simulation <- ssa(X, pfun, v, params, tmin, tmax, nsim = nsim, print.time = FALSE,
plot.sim = TRUE, maxiter = 50000, kthsave = 10, keep.file = FALSE)
simulation <- ssa(X, pfun, v, params, tmin, tmax, nsim = nsim, print.time = FALSE,
plot.sim = TRUE, maxiter = 50000, kthsave = 10, keep.file = FALSE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
v <- matrix(c(1,-1, -1, 0, 0, 0, 0, 0,
0, 1, 0, -1, -1, 0, 0, 0,
0, 0, 0, 1, 0, -1, -1, 0,
0, 0, 0, 0, 0, 1, 0, -1), nrow = 4, byrow = TRUE)
v
# Clear workspace
rm(list = ls())
# Set working directory
setwd("/Users/jbaafi/Documents/climate-and-mosquitoes/useful files")
# Load packages
pacman::p_load(pacman, GillespieSSA, ssar, ggplot2)
# Simulate the Hamdan and Kilicman model
#Initial parameters
params <- c(b = 100, mu_E = 0.05, mu_L = 0.06, mu_P = 0.04, mu_A = 0.05)
b <- params[1]
mu_E <- params[2]
mu_L <- params[3]
mu_P <- params[4]
mu_A <- params[5]
X <- matrix(c(E = 100, L = 100, P = 100, A = 100), ncol = 4)
E <- X[,1]
L <- X[,2]
P <- X[,3]
A <- X[,4]
pfun       <- function(t, X, params){
t <- seq(0, 50)
#Value to return
matreturn  <- matrix(NA, nrow = length(t), ncol = 8)
# Create temperature function
temp <- function(t){return(8.91910 - 5.59158*sin(2*pi*t/365) - 11.93443*cos(2*pi*t/365) + rnorm(1, mean = 0, sd = 1))} # replace with the right estimated parameter values
# Create rainfall function as a random event
#rain <- function(t){return(sample(seq(0, 20), t, replace = TRUE, prob = NULL))} # replace this with the estimated lognorm
#Create birth function
phi <- function(t){return(ifelse(temp(t) <= 15, 0.05, 0.0005498*temp(t)^1.9076657))}
#Create birth function
delta_E <- function(t){ return(ifelse(temp(t) <= 10, 0.05, 4.049403 *exp(-(temp(t)-75.098187)^2/1337.666814)))} # just to experiment on adding the rain function
#Create death function
delta_L <- function(t){ return(ifelse(temp(t) <= 10 | temp(t) >= 40, 0.01, 0.16231*exp(-(temp(t)-27.18118)^2/109.03255)))}
#
delta_P <- function(t){ return(ifelse(temp(t) <= 10 | temp(t) >= 40, 0.03, 0.5920232 *exp(-(temp(t)-39.9070020)^2/339.6702830)))}
#Estimate values (work from here downwards)
matreturn[,1] <- b*phi(t)*A
matreturn[,2] <- delta_E(t)*E
matreturn[,3] <- mu_E*E
matreturn[,4] <- delta_L(t)*L
matreturn[,5] <- mu_L*L
matreturn[,6] <- delta_P(t)*P
matreturn[,7] <- mu_P*P
matreturn[,8] <- mu_A*A
#Return
return(matreturn)
}
v <- matrix(c(1,-1, -1, 0, 0, 0, 0, 0,
0, 1, 0, -1, -1, 0, 0, 0,
0, 0, 0, 1, 0, -1, -1, 0,
0, 0, 0, 0, 0, 1, 0, -1), nrow = 4, byrow = TRUE)
tmin       <- 0
tmax       <- 1
nsim       <- 2
simulation <- ssa(X, pfun, v, params, tmin, tmax, nsim = nsim, print.time = FALSE,
plot.sim = TRUE, maxiter = 50000, kthsave = 10, keep.file = FALSE)
v <- matrix(c(1,-1, -1, 0, 0, 0, 0, 0, 0, 1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 1, 0, -1, -1, 0, 0, 0, 0, 0, 0, 1, 0, -1), nrow = 4, byrow = TRUE)
tmin       <- 0
tmax       <- 1
nsim       <- 2
simulation <- ssa(X, pfun, v, params, tmin, tmax, nsim, print.time = FALSE,
plot.sim = TRUE, maxiter = 50000, kthsave = 10, keep.file = TRUE,
fname = "sim2.txt")
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
tmax       <- 80
nsim       <- 2
simulation <- ssa(X, pfun, v, params, tmin, tmax, nsim, print.time = FALSE,
plot.sim = TRUE, maxiter = 50000, kthsave = 10, keep.file = TRUE,
fname = "sim2.txt")
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
simulation
tmin       <- 0
tmax       <- 50
nsim       <- 2
simulation <- ssa(X, pfun, v, params, tmin, tmax, nsim, print.time = FALSE,
plot.sim = TRUE, maxiter = 50000, kthsave = 10, keep.file = TRUE,
fname = "sim2.txt")
View(simulation)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
View(simulation)
plot(simulation$Time, simulation$Var1)
plot(simulation$Time, simulation$Var1, "l")
plot(simulation$Time, simulation$Var2, "l")
plot(simulation$Time, simulation$Var3, "l")
plot(simulation$Time, simulation$Var4, "l")
source("~/Documents/climate-and-mosquitoes/useful files/Hamdan_model.R", echo=TRUE)
View(simulation)
